// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    phone          String?

    accounts    Account[]
    sessions    Session[]
    Order       Order[]
    staffMember StaffMember?
    address     Address?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    image     String
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Order {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    orderNumber String
    amount      Float
    status      String

    student User   @relation(fields: [userId], references: [id])
    userId  String @db.ObjectId

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Address {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    city    String?
    country String?
    state   String?
    street  String?

    User   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.ObjectId

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model StaffMember {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    jobTitle       String
    jobDescription String
    team           String

    tasks  Task[]
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.ObjectId

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Task {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    department String
    status     String

    StaffMember   StaffMember? @relation(fields: [staffMemberId], references: [id])
    staffMemberId String?      @db.ObjectId

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}
