// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserType {
    admin
    teacher
    student
    salesAgent
    chatAgent
}

enum CoursStatuses {
    waiting
    ongoing
    completed
    cancelled
    refunded
    postponded
}

enum Devices {
    mobile
    tablet
    desktop
}

type CoursStatus {
    courseId String        @db.ObjectId
    state    CoursStatuses
}

model User {
    id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
    name                      String
    email                     String                     @unique
    emailVerified             DateTime?
    image                     String?
    hashedPassword            String?
    tempPassword              String?
    phone                     String?
    userType                  UserType                   @default(student)
    accounts                  Account[]
    sessions                  Session[]
    orders                    Order[]
    courseStatus              CoursStatus[]
    address                   Address?
    placementTests            PlacementTest[]
    trainer                   Trainer?                   @relation("UserToTrainer")
    trainerId                 String?                    @db.ObjectId
    salesAgent                SalesAgent?                @relation("UserToSalesAgent")
    chatAgent                 ChatAgent?                 @relation("UserToChatAgent")
    supportChat               SupportChat?               @relation("UserToChat")
    salesAgentId              String?                    @db.ObjectId
    device                    Devices?
    zoomGroups                ZoomGroup[]                @relation("UserToGroup", fields: [zoomGroupIds], references: [id])
    zoomGroupIds              String[]                   @db.ObjectId
    evaluationFormSubmissions EvaluationFormSubmission[]
    updatedAt                 DateTime                   @updatedAt
    createdAt                 DateTime                   @default(now())
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum TrainerRole {
    teacher
    tester
}

type TestTstatus {
    form Int?
    oral Int?
}

model PlacementTest {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    student       User        @relation(fields: [studentUserId], references: [id])
    studentUserId String      @db.ObjectId
    course        Course      @relation(fields: [courseId], references: [id])
    courseId      String      @db.ObjectId
    testStatus    TestTstatus
    trainer       Trainer?    @relation(fields: [trainerId], references: [id])
    trainerId     String?     @db.ObjectId
    updatedAt     DateTime    @updatedAt
    createdAt     DateTime    @default(now())
}

model Trainer {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    role          TrainerRole
    assignedTests PlacementTest[]
    groups        ZoomGroup[]
    zoomSession   ZoomSession[]
    user          User            @relation("UserToTrainer", fields: [userId], references: [id], onDelete: Cascade)
    userId        String          @unique @db.ObjectId
    updatedAt     DateTime        @updatedAt
    createdAt     DateTime        @default(now())
}

enum CourseLevels {
    A0_A1_Beginner_Elementary
    A2_Pre_Intermediate
    B1_Intermediate
    B2_Upper_Intermediate
    C1_Advanced
    C2_Proficient
}

model Course {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    description     String?
    image           String?
    groupPrice      Float
    privatePrice    Float
    instructorPrice Float
    oralTest        String
    placementTests  PlacementTest[]
    level           CourseLevels
    materialItems   MaterialItem[]
    zoomGroup       ZoomGroup[]
    EvaluationForm  EvaluationForm[]
    orders          Order[]          @relation(fields: [orderIds], references: [id])
    orderIds        String[]         @db.ObjectId
    updatedAt       DateTime         @updatedAt
    createdAt       DateTime         @default(now())
}

type Option {
    text      String?
    isTrue    Boolean?
    isCorrect Boolean
}

enum EvaluationFormQuestionType {
    multipleChoice
    trueFalse
}

model EvaluationFormQuestion {
    id               String                     @id @default(auto()) @map("_id") @db.ObjectId
    image            String?
    options          Option[]
    points           Int
    questionText     String
    type             EvaluationFormQuestionType
    EvaluationForm   EvaluationForm?            @relation(fields: [evaluationFormId], references: [id])
    evaluationFormId String?                    @db.ObjectId
    updatedAt        DateTime                   @updatedAt
    createdAt        DateTime                   @default(now())
}

enum EvaluationFormTypes {
    assignment
    quiz
    finalTest
    placementTest
}

type EvaluationFormHistory {
    updatedBy String
    updatedAt DateTime
}

model EvaluationForm {
    id             String                     @id @default(auto()) @map("_id") @db.ObjectId
    type           EvaluationFormTypes
    totalPoints    Int
    submissions    EvaluationFormSubmission[]
    questions      EvaluationFormQuestion[]
    updateHistory  EvaluationFormHistory[]
    materialItem   MaterialItem?              @relation(fields: [materialItemId], references: [id])
    materialItemId String?                    @db.ObjectId
    course         Course?                    @relation(fields: [courseId], references: [id])
    courseId       String?                    @db.ObjectId
    createdBy      String
    updatedAt      DateTime                   @updatedAt
    createdAt      DateTime                   @default(now())
}

model MaterialItem {
    id                String           @id @default(auto()) @map("_id") @db.ObjectId
    frameWorkName     String
    leadinText        String
    leadinImageUrl    String
    title             String
    subTitle          String
    firstTestTitle    String
    answerCards       AnswerCard[]
    answerAreas       AnswerArea[]
    vocabularyCards   VocabCard[]
    practiceQuestions Question[]
    evaluationForms   EvaluationForm[]
    zoomSessions      ZoomSession[]
    course            Course?          @relation(fields: [courseId], references: [id])
    courseId          String?          @db.ObjectId
    updatedAt         DateTime         @updatedAt
    createdAt         DateTime         @default(now())
}

type Question {
    id            String
    type          QuestionType
    question      String
    choices       String[]
    correctAnswer String
    studentAnswer String
}

enum QuestionType {
    ControlledPracticeMultichoiceQuestion
    ControlledPracticeFillTheGapQuestion
    ControlledPracticeQuestion
}

type VocabCard {
    word    String
    context String
    example String
    images  Images
}

type Images {
    front String
    back  String
}

type AnswerArea {
    img           String
    card          AnswerCard?
    correctAnswer String
}

type AnswerCard {
    id   String
    text String
}

enum OrderStatus {
    pending
    paid
    cancelled
    refunded
}

type CourseTypes {
    id        String
    isPrivate Boolean
}

model Order {
    id                       String         @id @default(auto()) @map("_id") @db.ObjectId
    orderNumber              String
    amount                   Float
    courseTypes              CourseTypes[]
    courses                  Course[]       @relation(fields: [courseIds], references: [id])
    courseIds                String[]       @db.ObjectId
    status                   OrderStatus    @default(pending)
    refundRequester          String?        @db.ObjectId
    refundId                 String?
    paymentId                String?
    paymentConfirmationImage String?
    salesOperation           SalesOperation @relation("OrderToSalesOperation", fields: [salesOperationId], references: [id], onDelete: Cascade)
    salesOperationId         String         @unique @db.ObjectId
    user                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                   String         @db.ObjectId
    updatedAt                DateTime       @updatedAt
    createdAt                DateTime       @default(now())
}

type Address {
    city    String?
    country String?
    state   String?
    street  String?
}

enum SalesOperationStatus {
    created
    assigned
    ongoing
    completed
    cancelled
}

model SalesOperation {
    id           String               @id @default(auto()) @map("_id") @db.ObjectId
    code         String
    status       SalesOperationStatus @default(created)
    assignee     SalesAgent?          @relation(fields: [salesAgentId], references: [id])
    salesAgentId String?              @db.ObjectId
    orderDetails Order?               @relation("OrderToSalesOperation")
    updatedAt    DateTime             @updatedAt
    createdAt    DateTime             @default(now())
}

model SalesAgent {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    salary    String
    tasks     SalesOperation[]
    user      User             @relation("UserToSalesAgent", fields: [userId], references: [id], onDelete: Cascade)
    userId    String           @unique @db.ObjectId
    updatedAt DateTime         @updatedAt
    createdAt DateTime         @default(now())
}

model PotintialCustomer {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    facebookUserId String
    firstName      String
    lastName       String
    picture        String?
    updatedAt      DateTime @updatedAt
    createdAt      DateTime @default(now())
}

model Message {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    text          String
    sender        String
    supportChat   SupportChat? @relation(fields: [supportChatId], references: [id], onDelete: Cascade)
    supportChatId String?      @db.ObjectId
    updatedAt     DateTime     @updatedAt
    createdAt     DateTime     @default(now())
}

model SupportChat {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    user      User?      @relation("UserToChat", fields: [userId], references: [id], onDelete: Cascade)
    userId    String?    @unique @db.ObjectId
    agent     ChatAgent? @relation(fields: [agentId], references: [id], onDelete: Cascade)
    agentId   String?    @db.ObjectId
    messages  Message[]
    updatedAt DateTime   @updatedAt
    createdAt DateTime   @default(now())
}

model ChatAgent {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    user      User          @relation("UserToChatAgent", fields: [userId], references: [id], onDelete: Cascade)
    userId    String        @unique @db.ObjectId
    chats     SupportChat[]
    updatedAt DateTime      @updatedAt
    createdAt DateTime      @default(now())
}

enum SessionStatus {
    scheduled
    ongoing
    completedOnTime
    completedOffTime
    cancelled
}

type SubmissionAnswer {
    text       String?
    isTrue     Boolean?
    questionId String   @db.ObjectId
}

model EvaluationFormSubmission {
    id                        String             @id @default(auto()) @map("_id") @db.ObjectId
    answers                   SubmissionAnswer[]
    rating                    Float
    student                   User               @relation(fields: [userId], references: [id])
    userId                    String             @db.ObjectId
    evaluationForm            EvaluationForm     @relation(fields: [evaluationFormId], references: [id], onDelete: Cascade)
    evaluationFormId          String             @db.ObjectId
    zoomSessionAsAssignment   ZoomSession?       @relation("Assignments", fields: [zoomSessionIdAsAssignment], references: [id])
    zoomSessionIdAsAssignment String?            @db.ObjectId
    zoomSessionAsQuiz         ZoomSession?       @relation("Quizzes", fields: [zoomSessionIdAsQuiz], references: [id])
    zoomSessionIdAsQuiz       String?            @db.ObjectId
    zoomGroup                 ZoomGroup?         @relation(fields: [zoomGroupId], references: [id])
    zoomGroupId               String?            @db.ObjectId
    updatedAt                 DateTime           @updatedAt
    createdAt                 DateTime           @default(now())
}

model ZoomSession {
    id             String                     @id @default(auto()) @map("_id") @db.ObjectId
    sessionDate    DateTime
    sessionLink    String
    sessionStatus  SessionStatus
    subTrainer     Trainer?                   @relation(fields: [subTrainerId], references: [id])
    subTrainerId   String?                    @db.ObjectId
    zoomGroup      ZoomGroup?                 @relation(fields: [groupId], references: [id])
    groupId        String?                    @db.ObjectId
    materialItem   MaterialItem?              @relation(fields: [materialItemId], references: [id])
    materialItemId String?                    @db.ObjectId
    attenders      String[]
    assignments    EvaluationFormSubmission[] @relation("Assignments")
    quizzes        EvaluationFormSubmission[] @relation("Quizzes")
    updatedAt      DateTime                   @updatedAt
    createdAt      DateTime                   @default(now())
}

enum GroupStatus {
    waiting
    active
    inactive
    paused
    cancelled
    completed
}

model ZoomGroup {
    id           String                     @id @default(auto()) @map("_id") @db.ObjectId
    groupNumber  String
    startDate    DateTime
    groupStatus  GroupStatus
    trainer      Trainer?                   @relation(fields: [trainerId], references: [id])
    trainerId    String?                    @db.ObjectId
    students     User[]                     @relation("UserToGroup", fields: [studentIds], references: [id])
    studentIds   String[]                   @db.ObjectId
    course       Course?                    @relation(fields: [courseId], references: [id])
    courseId     String?                    @db.ObjectId
    zoomSessions ZoomSession[]
    finalTests   EvaluationFormSubmission[]
    updatedAt    DateTime                   @updatedAt
    createdAt    DateTime                   @default(now())
}
