// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserType {
    admin
    teacher
    student
    salesAgent
    chatAgent
}

enum CoursStatuses {
    waiting
    ongoing
    completed
}

enum Devices {
    mobile
    tablet
    desktop
}

type CoursStatus {
    courseId String        @db.ObjectId
    state    CoursStatuses
}

model User {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String          @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    tempPassword   String?
    phone          String?
    userType       UserType        @default(student)
    accounts       Account[]
    sessions       Session[]
    orders         Order[]
    courseStatus   CoursStatus[]
    address        Address?
    placementTests PlacementTest[]
    zoomClasses    ZoomClass[]     @relation("ZoomClassToUser", fields: [zoomClassId], references: [id])
    trainer        Trainer?        @relation("UserToTrainer")
    trainerId      String?         @db.ObjectId
    salesAgent     SalesAgent?     @relation("UserToSalesAgent")
    chatAgent      ChatAgent?      @relation("UserToChatAgent")
    supportChat    SupportChat?    @relation("UserToChat")
    salesAgentId   String?         @db.ObjectId
    device         Devices?
    updatedAt      DateTime        @updatedAt
    createdAt      DateTime        @default(now())
    zoomClassId    String[]        @db.ObjectId
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum TrainerRole {
    teacher
    tester
}

type TestTstatus {
    form Int?
    oral Int?
}

model PlacementTest {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    student       User        @relation(fields: [studentUserId], references: [id])
    studentUserId String      @db.ObjectId
    course        Course      @relation(fields: [courseId], references: [id])
    courseId      String      @db.ObjectId
    testStatus    TestTstatus
    trainer       Trainer?    @relation(fields: [trainerId], references: [id])
    trainerId     String?     @db.ObjectId
    updatedAt     DateTime    @updatedAt
    createdAt     DateTime    @default(now())
}

model Trainer {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    role          TrainerRole
    assignedTests PlacementTest[]
    ZoomClass     ZoomClass[]
    user          User            @relation("UserToTrainer", fields: [userId], references: [id], onDelete: Cascade)
    userId        String          @unique @db.ObjectId
    updatedAt     DateTime        @updatedAt
    createdAt     DateTime        @default(now())
}

model ZoomClass {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    trainer    Trainer  @relation(fields: [trainerId], references: [id])
    trainerId  String   @db.ObjectId
    course     Course   @relation(fields: [courseId], references: [id])
    courseId   String   @db.ObjectId
    level      Level    @relation(fields: [levelId], references: [id])
    levelId    String   @db.ObjectId
    students   User[]   @relation("ZoomClassToUser", fields: [studentIds], references: [id])
    studentIds String[] @db.ObjectId
    updatedAt  DateTime @updatedAt
    createdAt  DateTime @default(now())
}

model Course {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    description    String?
    image          String?
    price          Float
    form           String
    oralTest       String
    zoomClasses    ZoomClass[]
    placementTests PlacementTest[]
    levels         Level[]
    orders         Order[]         @relation(fields: [orderIds], references: [id])
    orderIds       String[]        @db.ObjectId
    updatedAt      DateTime        @updatedAt
    createdAt      DateTime        @default(now())
}

model Level {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    code      String
    lessons   Lesson[]
    course    Course?     @relation(fields: [courseId], references: [id])
    courseId  String?     @db.ObjectId
    updatedAt DateTime    @updatedAt
    createdAt DateTime    @default(now())
    ZoomClass ZoomClass[]
}

model Lesson {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    materials MaterialItem[]
    level     Level?         @relation(fields: [levelId], references: [id])
    levelId   String?        @db.ObjectId
    updatedAt DateTime       @updatedAt
    createdAt DateTime       @default(now())
}

model MaterialItem {
    id                String       @id @default(auto()) @map("_id") @db.ObjectId
    frameWorkName     String
    leadinText        String
    leadinImageUrl    String
    title             String
    subTitle          String
    firstTestTitle    String
    answerCards       AnswerCard[]
    answerAreas       AnswerArea[]
    vocabularyCards   VocabCard[]
    practiceQuestions Question[]
    lesson            Lesson?      @relation(fields: [lessonId], references: [id])
    lessonId          String?      @db.ObjectId
    updatedAt         DateTime     @updatedAt
    createdAt         DateTime     @default(now())
}

type Question {
    id            String
    type          QuestionType
    question      String
    choices       String[]
    correctAnswer String
    studentAnswer String
}

enum QuestionType {
    ControlledPracticeMultichoiceQuestion
    ControlledPracticeFillTheGapQuestion
    ControlledPracticeQuestion
}

type VocabCard {
    word    String
    context String
    example String
    images  Images
}

type Images {
    front String
    back  String
}

type AnswerArea {
    img           String
    card          AnswerCard?
    correctAnswer String
}

type AnswerCard {
    id   String
    text String
}

enum OrderStatus {
    pending
    paid
    cancelled
    done
}

model Order {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    orderNumber      String
    amount           Float
    courses          Course[]       @relation(fields: [courseIds], references: [id])
    courseIds        String[]       @db.ObjectId
    status           OrderStatus    @default(pending)
    paymentId        String?
    salesOperation   SalesOperation @relation("OrderToSalesOperation", fields: [salesOperationId], references: [id], onDelete: Cascade)
    salesOperationId String         @unique @db.ObjectId
    user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String         @db.ObjectId
    updatedAt        DateTime       @updatedAt
    createdAt        DateTime       @default(now())
}

type Address {
    city    String?
    country String?
    state   String?
    street  String?
}

enum SalesOperationStatus {
    created
    assigned
    ongoing
    completed
    cancelled
}

model SalesOperation {
    id           String               @id @default(auto()) @map("_id") @db.ObjectId
    code         String
    status       SalesOperationStatus @default(created)
    assignee     SalesAgent?          @relation(fields: [salesAgentId], references: [id])
    salesAgentId String?              @db.ObjectId
    orderDetails Order?               @relation("OrderToSalesOperation")
    updatedAt    DateTime             @updatedAt
    createdAt    DateTime             @default(now())
}

model SalesAgent {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    salary    String
    tasks     SalesOperation[]
    user      User             @relation("UserToSalesAgent", fields: [userId], references: [id], onDelete: Cascade)
    userId    String           @unique @db.ObjectId
    updatedAt DateTime         @updatedAt
    createdAt DateTime         @default(now())
}

model PotintialCustomer {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    facebookUserId String
    firstName      String
    lastName       String
    picture        String?
    updatedAt      DateTime @updatedAt
    createdAt      DateTime @default(now())
}

model Message {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    text          String
    sender        String
    supportChat   SupportChat? @relation(fields: [supportChatId], references: [id], onDelete: Cascade)
    supportChatId String?      @db.ObjectId
    updatedAt     DateTime     @updatedAt
    createdAt     DateTime     @default(now())
}

model SupportChat {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    user      User?      @relation("UserToChat", fields: [userId], references: [id], onDelete: Cascade)
    userId    String?    @unique @db.ObjectId
    agent     ChatAgent? @relation(fields: [agentId], references: [id], onDelete: Cascade)
    agentId   String?    @db.ObjectId
    messages  Message[]
    updatedAt DateTime   @updatedAt
    createdAt DateTime   @default(now())
}

model ChatAgent {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    user      User          @relation("UserToChatAgent", fields: [userId], references: [id], onDelete: Cascade)
    userId    String        @unique @db.ObjectId
    chats     SupportChat[]
    updatedAt DateTime      @updatedAt
    createdAt DateTime      @default(now())
}
