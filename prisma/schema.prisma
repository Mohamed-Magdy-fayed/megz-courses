// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserType {
    admin
    teacher
    student
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String    @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    phone          String?
    userType       UserType  @default(student)
    accounts       Account[]
    sessions       Session[]
    orders         Order[]
    tasks          Task[]
    address        Address?
    updatedAt      DateTime  @updatedAt
    createdAt      DateTime  @default(now())
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    levels    Level[]
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Level {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    code      String
    lessons   Lesson[]
    course    Course?  @relation(fields: [courseId], references: [id])
    courseId  String?  @db.ObjectId
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Lesson {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    materials MaterialItem[]
    level     Level?         @relation(fields: [levelId], references: [id])
    levelId   String?        @db.ObjectId
    updatedAt DateTime       @updatedAt
    createdAt DateTime       @default(now())
}

model MaterialItem {
    id                String       @id @default(auto()) @map("_id") @db.ObjectId
    frameWorkName     String
    leadinText        String
    leadinImageUrl    String
    title             String
    subTitle          String
    firstTestTitle    String
    answerCards       AnswerCard[]
    answerAreas       AnswerArea[]
    vocabularyCards   VocabCard[]
    practiceQuestions Question[]
    lesson            Lesson?      @relation(fields: [lessonId], references: [id])
    lessonId          String?      @db.ObjectId
    updatedAt         DateTime     @updatedAt
    createdAt         DateTime     @default(now())
}

type Question {
    id            String
    type          QuestionType
    question      String
    choices       String[]
    correctAnswer String
    studentAnswer String
}

enum QuestionType {
    ControlledPracticeMultichoiceQuestion
    ControlledPracticeFillTheGapQuestion
    ControlledPracticeQuestion
}

type VocabCard {
    word    String
    context String
    example String
    images  Images
}

type Images {
    front String
    back  String
}

type AnswerArea {
    img           String
    card          AnswerCard?
    correctAnswer String
}

type AnswerCard {
    id   String
    text String
}

enum OrderStatus {
    pending
    paid
    cancelled
    done
}

model Order {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    orderNumber String
    amount      Float
    status      OrderStatus @default(pending)
    user        User        @relation(fields: [userId], references: [id])
    userId      String      @db.ObjectId
    updatedAt   DateTime    @updatedAt
    createdAt   DateTime    @default(now())
}

model Address {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    city      String?
    country   String?
    state     String?
    street    String?
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique @db.ObjectId
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

enum TaskStatus {
    created
    assigned
    ongoing
    completed
    cancelled
}

model Task {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    status    TaskStatus @default(created)
    assignee  User       @relation(fields: [userId], references: [id])
    userId    String     @db.ObjectId
    updatedAt DateTime   @updatedAt
    createdAt DateTime   @default(now())
}

model AdsData {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    data      Json
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model PotintialCustomer {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    facebookUserId String
    firstName      String
    lastName       String
    picture        String?
    updatedAt      DateTime @updatedAt
    createdAt      DateTime @default(now())
}
